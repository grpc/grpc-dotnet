<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessOptionDescription" xml:space="preserve">
    <value>The access modifier to use for the generated C# classes. Default value is Public.</value>
  </data>
  <data name="AddFileCommandArgumentDescription" xml:space="preserve">
    <value>The protobuf file reference(s). These can be a path to glob for local protobuf file(s).</value>
  </data>
  <data name="AddFileCommandDescription" xml:space="preserve">
    <value>Add protobuf file reference(s) to the gRPC project.</value>
  </data>
  <data name="AdditionalImportDirsOption" xml:space="preserve">
    <value>Additional directories to be used when resolving imports for the protobuf files. This is a semicolon separated list of paths.</value>
  </data>
  <data name="AddUrlCommandArgumentDescription" xml:space="preserve">
    <value>The URL to a remote protobuf file.</value>
  </data>
  <data name="AddUrlCommandDescription" xml:space="preserve">
    <value>Add a protobuf url reference to the gRPC project.</value>
  </data>
  <data name="DryRunOptionDescription" xml:space="preserve">
    <value>Output a list of file(s) that will be updated without downloading any new content.</value>
  </data>
  <data name="LogAddFileReference" xml:space="preserve">
    <value>Adding file reference {0}.</value>
  </data>
  <data name="LogAddPackageReference" xml:space="preserve">
    <value>Adding required gRPC package reference: {0}.</value>
  </data>
  <data name="LogAddUrlReference" xml:space="preserve">
    <value>Adding file reference {0} with content from {1}.</value>
  </data>
  <data name="LogDownload" xml:space="preserve">
    <value>Updating content of {0} with content at {1}.</value>
  </data>
  <data name="LogRemoveReference" xml:space="preserve">
    <value>Removing reference to file {0}.</value>
  </data>
  <data name="LogSkipDownload" xml:space="preserve">
    <value>Content of {0} is identical to the content at {1}, skipping.</value>
  </data>
  <data name="LogWarningCouldNotFindFileReference" xml:space="preserve">
    <value>Could not find a reference for the file `{0}`.</value>
  </data>
  <data name="LogWarningCouldNotFindRemoteReference" xml:space="preserve">
    <value>Could not find a reference that uses the source url `{0}`.</value>
  </data>
  <data name="LogWarningReferenceNotProto" xml:space="preserve">
    <value>The reference {0} does not reference a .proto file. This may lead to compilation errors.</value>
  </data>
  <data name="OutputOptionDescription" xml:space="preserve">
    <value>Specify the download path for the remote protobuf file. This is a required option.</value>
  </data>
  <data name="ProjectOptionDescription" xml:space="preserve">
    <value>The path to the project file to operate on. If a file is not specified, the command will search the current directory for one.</value>
  </data>
  <data name="RefreshCommandArgumentDescription" xml:space="preserve">
    <value>The URL(s) or file path(s) to remote protobuf references(s) that should be updated. Leave this argument empty to refresh all remote references.</value>
  </data>
  <data name="RefreshCommandDescription" xml:space="preserve">
    <value>Check remote protobuf references(s) for updates and replace them if a newer version is available. If no file or url is provided, all remote protobuf files will be updated.</value>
  </data>
  <data name="RemoveCommandArgumentDescription" xml:space="preserve">
    <value>The URL(s) or file path(s) of the protobuf references to remove.</value>
  </data>
  <data name="RemoveCommandDescription" xml:space="preserve">
    <value>Remove protobuf references(s) from the gRPC project.</value>
  </data>
  <data name="ServiceOptionDescription" xml:space="preserve">
    <value>The type of gRPC services that should be generated. If Default is specified, Both will be used for Web projects and Client will be used for non-Web projects.</value>
  </data>
  <data name="ErrorMoreThanOneProjectFound" xml:space="preserve">
    <value>Found more than one project in `{0}`. Please specify which one to use.</value>
  </data>
  <data name="ErrorNoProjectFound" xml:space="preserve">
    <value>Could not find any project in `{0}`. Please specify a project explicitly.</value>
  </data>
  <data name="ErrorProjectDoesNotExist" xml:space="preserve">
    <value>The project {0} does not exist.</value>
  </data>
  <data name="ErrorReferenceDoesNotExist" xml:space="preserve">
    <value>The reference {0} does not exist.</value>
  </data>
  <data name="ErrorReferenceNotUrl" xml:space="preserve">
    <value>The reference being added is not a valid URL.</value>
  </data>
  <data name="ErrorNoOutputProvided" xml:space="preserve">
    <value>A output path must be specified when adding a URL reference via the '-o|--output' option.</value>
  </data>
  <data name="ErrorOutputMustBeFilePath" xml:space="preserve">
    <value>Output path `{0}` is invalid. The path cannot be a directory path and must be a file path.</value>
  </data>
  <data name="LogWarningNoReferenceResolved" xml:space="preserve">
    <value>No file found matching file argument `{0}`. File reference not added.</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>List the protobuf references of the gRPC project.</value>
  </data>
  <data name="TableColumnAccess" xml:space="preserve">
    <value>Access</value>
  </data>
  <data name="TableColumnAdditionalImports" xml:space="preserve">
    <value>Additional Imports</value>
  </data>
  <data name="TableColumnProtobufReference" xml:space="preserve">
    <value>Protobuf Reference</value>
  </data>
  <data name="TableColumnServiceType" xml:space="preserve">
    <value>Service Type</value>
  </data>
  <data name="TableColumnSourceUrl" xml:space="preserve">
    <value>Source URL</value>
  </data>
  <data name="LogNoReferences" xml:space="preserve">
    <value>No protobuf references in the gRPC project.</value>
  </data>
</root>